name: DAST-Vercel

on:
  pull_request:
    branches:
      - '**'

# 最小权限即可；如需自动创建 Issue 再加 issues: write
permissions:
  contents: read

jobs:
  zap-baseline:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # 通过 Vercel API 找到当前 PR 对应的 Preview URL
      - name: Get Vercel Preview URL (commit → PR → latest)
        id: vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT: ${{ secrets.VERCEL_PROJECT }}
          VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        shell: bash
        run: |
          set -euo pipefail
          TEAM_ARG=""
          if [ -n "${VERCEL_TEAM_ID:-}" ]; then TEAM_ARG="&teamId=$VERCEL_TEAM_ID"; fi

          JSON=$(curl -fsSL -H "Authorization: Bearer $VERCEL_TOKEN" \
            "https://api.vercel.com/v6/deployments?app=$VERCEL_PROJECT&target=preview&limit=100$TEAM_ARG")

          echo "—— latest five ——"
          echo "$JSON" | jq -r '.deployments[0:5][] | {url,state,target,meta:{githubCommitSha,githubPrId}}'

          URL=$(echo "$JSON" | jq -r --arg SHA "$HEAD_SHA" \
            '.deployments[] | select(.meta.githubCommitSha == $SHA) | .url' | head -n1)

          if [ -z "${URL:-}" ] || [ "$URL" = "null" ]; then
            URL=$(echo "$JSON" | jq -r --argjson PR "$PR_NUMBER" \
              '.deployments[] | select(.meta.githubPrId == $PR) | .url' | head -n1)
          fi

          if [ -z "${URL:-}" ] || [ "$URL" = "null" ]; then
            URL=$(echo "$JSON" | jq -r '.deployments | sort_by(.createdAt // .created) | reverse | .[0].url')
          fi

          if [ -z "${URL:-}" ] || [ "$URL" = "null" ]; then
            echo "cannot find Preview URL"
            exit 1
          fi

          echo "preview=https://$URL" >> "$GITHUB_OUTPUT"
          echo "✅ Found preview: https://$URL"

      # 运行 ZAP Baseline（匿名）, 使用忽略规则文件压低噪音
      - name: ZAP Baseline Scan
        id: zap
        uses: zaproxy/action-baseline@v0.13.0
        with:
          target: ${{ steps.vercel.outputs.preview }}
          cmd_options: -a               # 自动化模式，多做一些检查
          allow_issue_writing: false    # 不自动创建 Issue（避免 403）
          rules_file_name: .zap/rules.tsv
          # 不使用 artifact_name，改为手动上传，避免 400

      # 看看报告生成在哪（调试用）
      - name: List ZAP outputs
        run: ls -lah && echo && ls -lah report* || true

    
      - name: Upload ZAP reports
        uses: actions/upload-artifact@v4
        with:
          name: zap
          path: |
            **/report_html.html
            **/report_json.json
            **/report_md.md
          if-no-files-found: error


      - name: Install wkhtmltoimage
        run: |
          sudo apt-get update
          sudo apt-get install -y wkhtmltopdf   # 包含 wkhtmltoimage

      - name: Show report screenshot in Summary
        shell: bash
        run: |
          # 选工作区里的第一个 report_html.html 渲染为 PNG
          FILE=$(ls -1 **/report_html.html 2>/dev/null | head -n1)
          if [ -n "$FILE" ]; then
            wkhtmltoimage --width 1200 "$FILE" zap-summary.png
            B64=$(base64 -w0 zap-summary.png)
            {
              echo "## DAST / ZAP Summary"
              echo "**Target:** ${{ steps.vercel.outputs.preview }}"
              echo "<details><summary>点击展开：报告截图</summary>"
              echo "<img src='data:image/png;base64,${B64}' alt='ZAP Summary'/>"
              echo "</details>"
              echo ""
              echo "完整报告：在本页右侧 **Artifacts → zap** 下载。"
            } >> "$GITHUB_STEP_SUMMARY"
          else
            echo "No report_html.html found to render" >> "$GITHUB_STEP_SUMMARY"
          fi
