name: DAST-Vercel

on:
  pull_request:
    branches:
      - '**'

permissions:
  contents: read
  actions: write  # ← allow creating artifact containers

jobs:
  zap-baseline:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get Vercel Preview URL (commit → PR → latest)
        id: vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT: ${{ secrets.VERCEL_PROJECT }}
          VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        shell: bash
        run: |
          set -euo pipefail
          TEAM_ARG=""
          if [ -n "${VERCEL_TEAM_ID:-}" ]; then TEAM_ARG="&teamId=$VERCEL_TEAM_ID"; fi
          JSON=$(curl -fsSL -H "Authorization: Bearer $VERCEL_TOKEN" \
            "https://api.vercel.com/v6/deployments?app=$VERCEL_PROJECT&target=preview&limit=100$TEAM_ARG")
          URL=$(echo "$JSON" | jq -r --arg SHA "$HEAD_SHA" \
            '.deployments[] | select(.meta.githubCommitSha == $SHA) | .url' | head -n1)
          if [ -z "${URL:-}" ] || [ "$URL" = "null" ]; then
            URL=$(echo "$JSON" | jq -r --argjson PR "$PR_NUMBER" \
              '.deployments[] | select(.meta.githubPrId == $PR) | .url' | head -n1)
          fi
          if [ -z "${URL:-}" ] || [ "$URL" = "null" ]; then
            URL=$(echo "$JSON" | jq -r '.deployments | sort_by(.createdAt // .created) | reverse | .[0].url')
          fi
          if [ -z "${URL:-}" ] || [ "$URL" = "null" ]; then
            echo "cannot find Preview URL"; exit 1
          fi
          echo "preview=https://$URL" >> "$GITHUB_OUTPUT"
          echo "✅ Found preview: https://$URL"

      - name: ZAP Baseline Scan (no built-in artifact upload)
        uses: zaproxy/action-baseline@v0.13.0
        with:
          target: ${{ env.TARGET }}         # ← now a full https://... URL
          cmd_options: >-
            -a -d --autooff -T 10 -m 2
            -r report_html.html -w report_md.md -J report_json.json -x report_xml.xml
            -i -s
          rules_file_name: .zap/rules.tsv
          artifact_name: ""                 # disable built-in upload

      - name: List ZAP outputs
        run: ls -lah && echo && ls -lah report* || true

      # Upload artifacts only when PR is from the same repo (not a fork)
      - name: Upload ZAP reports (manual)
        if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
        uses: actions/upload-artifact@v4
        with:
          name: zap-${{ github.run_id }}-${{ github.job }}-${{ github.run_attempt }}  # unique, simple
          path: |
            **/report_html.html
            **/report_json.json
            **/report_md.md
          if-no-files-found: error

      # Always inline a screenshot in Summary so you can see results even on forks
      - name: Install wkhtmltoimage
        run: |
          sudo apt-get update
          sudo apt-get install -y wkhtmltopdf

      - name: Show report screenshot in Summary
        shell: bash
        run: |
          FILE=$(ls -1 **/report_html.html 2>/dev/null | head -n1 || true)
          if [ -n "$FILE" ]; then
            wkhtmltoimage --width 1200 "$FILE" zap-summary.png
            B64=$(base64 -w0 zap-summary.png)
            {
              echo "## DAST / ZAP Summary"
              echo "**Target:** ${{ steps.vercel.outputs.preview }}"
              echo "<details><summary>Report screenshot</summary>"
              echo "<img src='data:image/png;base64,${B64}' alt='ZAP Summary'/>"
              echo "</details>"
              if [ "${{ github.event.pull_request.head.repo.full_name == github.repository }}" = "true" ]; then
                echo "Full HTML/JSON/MD report: see **Artifacts** on the right."
              else
                echo "_Fork PR: artifact upload skipped by policy; screenshot shown above._"
              fi
            } >> "$GITHUB_STEP_SUMMARY"
          else
            echo "No report_html.html found" >> "$GITHUB_STEP_SUMMARY"
          fi
